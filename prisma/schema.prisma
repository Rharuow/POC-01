// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "generated/type-graphql"
  contextPrismaKey = "p"
  emitTranspiledCode = true
}

model Address {
  id                      String @id @default(uuid())
  createdAt               DateTime?   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime?   @updatedAt

  billing                 String? @unique
  delivery                String? @unique

  clientId                String? @unique
  client                  Client?
}

model Document {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  cpf                     String? @unique
  cnpj                    String? @unique

  clientId                String? @unique
  client                  Client?
}

model Client {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  name                    String 
  email                   String @unique

  documentId              String @unique
  document                Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  addressId               String @unique
  address                 Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  sales                   Sale[]
}

model Category {
  id                      String @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  name                    String @unique

  produtos                Product[]
}

model Product {
  id                      String     @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  name                    String      @unique
  description             String
  inventory_quantity      Int         @default(1)

  categories              Category[]
  orders                  Order[]
}

model Order {
  id                      String     @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  amount                  Int        @default(1)
  totalPrice              Float

  productId               String
  product                 Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  saleId                  String
  sale                    Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
}


model Sale {
  id                      String     @id @default(uuid())
  createdAt               DateTime   @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime   @updatedAt

  totalPrice              Float

  orders                  Order[]

  clientId                String
  client                  Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}